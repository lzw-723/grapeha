package fun.lzwi.grapeha.db;

import fun.lzwi.grapeha.config.ConfigUtils;
import io.vertx.core.Future;
import io.vertx.core.Vertx;
import io.vertx.core.impl.logging.Logger;
import io.vertx.core.impl.logging.LoggerFactory;
import io.vertx.core.json.JsonObject;
import io.vertx.jdbcclient.JDBCPool;

public class HSQLDB {
  private static JDBCPool pool;

  public static Future<JDBCPool> init(Vertx vertx) {
    Logger logger = LoggerFactory.getLogger(HSQLDB.class);

    String url = "jdbc:hsqldb:file:" + ConfigUtils.getConfigPath() + "/db/library/library_database";
    final JsonObject config = new JsonObject().put("url", url).put("datasourceName", "pool-name").put("username", "sa").put("password", "").put("max_pool_size", 16);

    pool = JDBCPool.pool(vertx, config);

    String createTableSQL = "CREATE TABLE IF NOT EXISTS BOOKS (" + "ID VARCHAR(36) PRIMARY KEY," + "TITLE VARCHAR(255) NOT NULL," + "author VARCHAR(255)," + "date VARCHAR(255)," + "description VARCHAR(511)," + "PATH VARCHAR(255) NOT NULL" + ");";
    createTableSQL += "CREATE TABLE IF NOT EXISTS Users (" + "id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," + "username VARCHAR(255) NOT NULL UNIQUE," + "password VARCHAR(255) NOT NULL" + ");";
    return pool.query(createTableSQL).execute().onFailure(e -> {
      logger.error("数据库初始化失败！", e);
    }).onSuccess(r -> {
      logger.info("数据库初始化成功。");
    }).map(pool);
  }
}
